{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>We&#39;ve been able to modify HTML and CSS using JavaScript using <code>document</code>. Awesome! We&#39;re going to go one step further and start involving the user. Web sites are meant to be reactive to users. In order to be reactive to them, we need to wait for them to do stuff, like click a button or type in an input. The way we do that is we wait for <strong>events</strong> to happen. An event is created every time certain events happens like when a user clicks something or when they type something. We respond to these events by having what are called <strong>event listeners</strong>. We give an event listener a function to run whenever an event happens. Let&#39;s take a look at responding to a click when a user clicks a button.</p>\n<blockquote>\n<p>NOTE: Since it&#39;s possible for a single tag to have multiple listeners, every time you type into the coding box, it&#39;s adding more event listeners to that same button. Therefore you&#39;ll have multiple alerts.</p>\n</blockquote>\n<pre><code class=\"hljs language-display-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;event-button&quot;</span>&gt;</span>Click me!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n</code></pre>\n<p><button class=\"event-button\">Click me!</button></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> button = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.event-button&quot;</span>);\nbutton.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;Hey there!&quot;</span>);\n});\n</code></pre>\n<p>Let&#39;s break it down.</p>\n<ul>\n<li>We grab the button via <code>querySelector</code> and store it in the JavaScript variable <code>button</code>.</li>\n<li>We then call the <code>addEventListener</code> method on the button. This takes two parameters (no need to memorize this, you can always look it up): the name of the event you want respond to, which in this case is the <code>click</code> event, and a function that is called whenever that event happens. This function is often called a <strong>callback</strong> because it gets called back whenever the event happens.</li>\n<li>We then call a function called <code>alert</code>. <code>alert</code> is a super, super annoying function that pops up a dialog window with whatever you call it with.</li>\n<li>People often get confused seeing <code>});</code> on the last line. The first <code>}</code> is closing the function, the second <code>)</code> is closing the function call of <code>addEventListener</code>, and the <code>;</code> ends the statement.</li>\n</ul>\n<blockquote>\n<p><code>alert</code> comes from the DOM. It&#39;s technically <code>window.alert</code> but when you&#39;re working in a browser you can always leave out <code>window</code> since it&#39;s implied. This pretty much only ever happens with <code>window</code> so don&#39;t worry too much about it. Only becomes a problem when you start writing Node.js which is beyond the scope of this class.</p>\n</blockquote>\n<p>Let&#39;s do another example with an <code>input</code> tag.</p>\n<pre><code class=\"hljs language-display-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;type into me!&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;input-to-copy&quot;</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p-to-copy-to&quot;</span>&gt;</span>Nothing has happened yet.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</code></pre>\n<input placeholder=\"type into me!\" class=\"input-to-copy\" />\n<p class=\"p-to-copy-to\">Nothing has happened yet.</p>\n\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.input-to-copy&quot;</span>);\n<span class=\"hljs-keyword\">const</span> paragraph = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.p-to-copy-to&quot;</span>);\n\ninput.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;keyup&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  paragraph.<span class=\"hljs-property\">innerText</span> = input.<span class=\"hljs-property\">value</span>;\n});\n</code></pre>\n<p>Try typing into the input. You&#39;ll see whatever text you type into the input will instantly be reflected in the <code>p</code> tag. Pretty cool, right?</p>\n<ul>\n<li>We&#39;re now using the <code>keyup</code> event. This event happens whenever you release a key after pressing it. As you may guess, there is a <code>keydown</code> event too that is fired whenver you press a key. We&#39;re using <code>keyup</code> because <code>keydown</code> happens <em>before</em> a key actually registers which means we would always be one key behind.</li>\n<li>We&#39;re reference <code>input.value</code>. The value property of an input reflects whatever the user has typed into the input.</li>\n<li>We&#39;re taking whatever is in <code>input.value</code> and passing that directly into the <code>paragraph.innerText</code>. Since that function is called every time a user types into the input, it keeps the two in sync!</li>\n</ul>\n<p>One more example and then we&#39;ll move on.</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.color-box</span> {\n  <span class=\"hljs-attribute\">background-color</span>: limegreen;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>;\n}\n</code></pre>\n<pre><code class=\"hljs language-display-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;color-box&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;color-input&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;Type a color here!&quot;</span> /&gt;</span>\n</code></pre>\n<style>\n  .color-box {\n    background-color: limegreen;\n    width: 100px;\n    height: 100px;\n  }\n</style>\n<div class=\"color-box\"></div>\n<input class=\"color-input\" placeholder=\"Type a color here!\" />\n\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.color-input&quot;</span>);\n<span class=\"hljs-keyword\">const</span> paragraph = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.color-box&quot;</span>);\n\ninput.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;change&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  paragraph.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">backgroundColor</span> = input.<span class=\"hljs-property\">value</span>;\n});\n</code></pre>\n<p>Similar to above. The key difference here is that we&#39;re listening for <code>change</code> events. <code>change</code> events happen whenever a user types something in the input and then unfocuses the input by clicking somewhere else or hitting tab to change the focus. Try typing &quot;red&quot; and then clicking somewhere else. Also, try something that isn&#39;t a color. Notice that if you give it an invalid color it just doesn&#39;t change anything.</p>\n<h2 id=\"event-delegation\">Event Delegation</h2>\n<p>If you have a bunch of elements that you need to listen for events on, you could attach an event listener to each but that&#39;s a bit tedious to do. Instead what is sometimes easier to do is to use what&#39;s called <strong>event bubbling</strong>. When event fires on an element, after that &quot;bubbles&quot; up to its parent, and then its parent, and its parent, etc. until it&#39;s at the root element.</p>\n<pre><code class=\"hljs language-display-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;button-container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<div class=\"button-container\">\n  <button>1</button>\n  <button>2</button>\n  <button>3</button>\n  <button>4</button>\n  <button>5</button>\n</div>\n\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-variable language_\">document</span>\n  .<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.button-container&quot;</span>)\n  .<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) {\n    <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">`You clicked on button <span class=\"hljs-subst\">${event.target.innerText}</span>`</span>);\n  });\n</code></pre>\n<p>You can see that we only bound event listener, and that was the div above it. Then, when we click the button, we&#39;re using the <code>event</code> parameter that is being passed into the callback. You may be wondering where that came from. It was always there, we just ignoring it. An event listener&#39;s first parameter is always an event object. There&#39;s lots of information on the event object but we&#39;re most concerned with <code>event.target</code>. <code>target</code> is the tag that the event originated from. In this case it&#39;ll be the button that caused the event. And we know that with tags you can use the <code>innerText</code> property to get the text inside of them. That&#39;s how we able to alert the correct number. Cool, right?</p>\n","slug":"events-and-listeners","title":"Events and Listeners","section":"Putting It All Together","icon":"arrows-to-dot","filePath":"/home/runner/work/complete-intro-to-web-dev-v3/complete-intro-to-web-dev-v3/lessons/05-putting-it-all-together/B-events-and-listeners.md","nextSlug":"/complete-intro-to-web-dev-v3/lessons/putting-it-all-together/project","prevSlug":"/complete-intro-to-web-dev-v3/lessons/putting-it-all-together/the-dom"}},"__N_SSG":true}
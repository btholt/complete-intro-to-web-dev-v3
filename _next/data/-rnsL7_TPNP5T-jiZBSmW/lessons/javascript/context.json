{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>Given an object with a person&#39;s address, wouldn&#39;t it be nice if we could use a function to nicely print out a properly formatted shipping address?</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> me = {\n  <span class=\"hljs-attr\">name</span>: {\n    <span class=\"hljs-attr\">first</span>: <span class=\"hljs-string\">&quot;Brian&quot;</span>,\n    <span class=\"hljs-attr\">last</span>: <span class=\"hljs-string\">&quot;Holt&quot;</span>,\n  },\n  <span class=\"hljs-attr\">location</span>: {\n    <span class=\"hljs-attr\">streetNumber</span>: <span class=\"hljs-number\">500</span>,\n    <span class=\"hljs-attr\">street</span>: <span class=\"hljs-string\">&quot;Fakestreet&quot;</span>,\n    <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&quot;Seattle&quot;</span>,\n    <span class=\"hljs-attr\">state</span>: <span class=\"hljs-string\">&quot;WA&quot;</span>,\n    <span class=\"hljs-attr\">zipCode</span>: <span class=\"hljs-number\">55555</span>,\n    <span class=\"hljs-attr\">country</span>: <span class=\"hljs-string\">&quot;USA&quot;</span>,\n  },\n  <span class=\"hljs-title function_\">getAddress</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name.first}</span> <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name.last}</span>\n<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.location.streetNumber}</span> <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.location.street}</span>\n<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.location.city}</span>, <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.location.state}</span> <span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.location.zipCode}</span>\n<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.location.country}</span>`</span>;\n  },\n};\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(me.<span class=\"hljs-title function_\">getAddress</span>());\n</code></pre>\n<p>This is our first time seeing the weird <code>this</code> keyword. This is a strange, complicated, and difficult concept in JavaScript known as context and trips up all sorts of people, new and old to the language. If you decide to pursue a career as a developer, interviewers will often ask questions about context in JavaScript. It&#39;s worth investment to understand how it works eventually (not now, focus just focus on basic JS for now.)</p>\n<p>In the simplest form, anywhere you are in JavaScript you have a context you are in. You can reference that context by using <code>this</code>. If I just reference <code>this</code> from the outtermost layer, it&#39;ll be the global object, which in the browser is something called <code>window</code>. <code>window</code> already has a bunch of stuff on it. For example:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span> === <span class=\"hljs-variable language_\">window</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">scrollY</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">scrollY</span>);\n</code></pre>\n<p>As you can see from the first line, you can see that in this context, window is the <code>this</code> at that time. However, in the example above when we&#39;re doing the address, the <code>this</code> is the object since when I <strong>call the function</strong>, it&#39;s created inside of an object. That object then becomes <code>this</code> when <code>getAddress</code> is called. As soon as the function completes, the context is destroyed and the context goes back to being what it was before, in this case <code>window</code>.</p>\n<p>A good rule of thumb (that is unfortunately not always true) is that if you&#39;re inside an object of some sort, the <code>this</code> will be that object. If not, it&#39;ll be the global object, <code>window</code>. There are crazy exceptions to this and you can even manipulate it yourself. For now, operate with that definition. It&#39;s a deep-and-dark rabbit hole to go down so let&#39;s continue and you can take <a href=\"https://frontendmasters.com/courses/getting-started-javascript-v2/\">Kyle Simpson&#39;s course</a> later where he goes in depth on it.</p>\n","slug":"context","title":"Context","section":"JavaScript","icon":"bolt","filePath":"/home/runner/work/complete-intro-to-web-dev-v3/complete-intro-to-web-dev-v3/lessons/04-javascript/J-context.md","nextSlug":"/complete-intro-to-web-dev-v3/lessons/javascript/arrays","prevSlug":"/complete-intro-to-web-dev-v3/lessons/javascript/objects"}},"__N_SSG":true}
{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>CSS animations are a deep pool of knowledge and we&#39;re just going to look at a few of the techniques. <a href=\"https://codepen.io/juliangarnier/pen/krNqZO\">You can achieve some truly amazing things with <em>just</em> CSS animations</a>. You can also use JavaScript with CSS to make anything you can imagine.</p>\n<pre><code class=\"hljs language-html\">&lt;style&gt;\n  @keyframes spin {\n    to {\n      transform: rotate(360deg);\n    }\n  }\n  .spinny-boi {\n    animation: spin 0.5s infinite linear;\n    display: inline-block;\n    font-size: 30px;\n  }\n&lt;/style&gt;\n&lt;div class=&quot;spinny-boi&quot;&gt;ðŸ¤¢&lt;/div&gt;\n</code></pre>\n<ul>\n<li>The <code>@keyframes</code> part allows you to define a reusable animation. We could throw <code>spin</code> on anything now.</li>\n<li>We just definte <code>to</code> which is what you want the end state of your animation state to be. We could define <code>from</code> too which is where you want your animation to start from. Implicitly if you don&#39;t define a from, your animation starts from where it is already. In this case, the <code>spinny-boi</code> isn&#39;t rotated at all, or <code>transform: rotate(0deg)</code>. So it will rotate from 0 t0 360, or a full revolution. Feel free to play with it.</li>\n<li><code>animation</code> is the property to <em>use</em> a defined keyframe. Here we just say &quot;do what spin defines, the whole animation should take a half second, do it infinitely (aka never stop), and do it in a linear fashion (so there&#39;s no speed-up or speed-down in the animation). This is a short hand. You can define the properties separately. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function\">See the MDN here</a>.</li>\n</ul>\n<h2 id=\"easing\">Easing</h2>\n<p>Animation implies some sort of change over time. You&#39;re going from 0 to 1 in some capacity. The rate of change can be manipulated to achieve some cool effects. In the previous example you saw a linear function (these effects are called functions) where it&#39;s just a smooth line between 0 and 1. Let&#39;s check out the other possibilities.</p>\n<pre><code class=\"hljs language-html\">&lt;style&gt;\n  @keyframes move {\n    to {\n      translate: 50px;\n    }\n  }\n  .dancer {\n    display: inline-block;\n    font-size: 30px;\n    position: absolute;\n    right: 0;\n\n    /*\n    this is the long way of doing:\n    animation: move 1s infinite alternate;\n    */\n    animation-name: move;\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n  }\n\n  .dancers-list {\n    width: 100%;\n    max-width: 300px;\n    position: relative;\n  }\n\n  .linear {\n    animation-timing-function: linear;\n  }\n  .ease {\n    animation-timing-function: ease;\n  }\n  .ease-in-out {\n    animation-timing-function: ease-in-out;\n  }\n  .ease-in {\n    animation-timing-function: ease-in;\n  }\n  .ease-out {\n    animation-timing-function: ease-out;\n  }\n  .cubic-bezier {\n    animation-timing-function: cubic-bezier(0,1,.5,1);\n  }\n&lt;/style&gt;\n\n&lt;ul class=&quot;dancers-list&quot;&gt;\n  &lt;li&gt;linear: &lt;span class=&quot;dancer linear&quot;&gt;ðŸ’ƒ&lt;/li&gt;\n  &lt;li&gt;ease: &lt;span class=&quot;dancer ease&quot;&gt;ðŸ’ƒ&lt;/li&gt;\n  &lt;li&gt;ease-in-out: &lt;span class=&quot;dancer ease-in-out&quot;&gt;ðŸ’ƒ&lt;/li&gt;\n  &lt;li&gt;ease-in: &lt;span class=&quot;dancer ease-in&quot;&gt;ðŸ’ƒ&lt;/li&gt;\n  &lt;li&gt;ease-out: &lt;span class=&quot;dancer ease-out&quot;&gt;ðŸ’ƒ&lt;/li&gt;\n  &lt;li&gt;cubic-bezier: &lt;span class=&quot;dancer cubic-bezier&quot;&gt;ðŸ’ƒ&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>Notice all of them some sort of what we&#39;d call &quot;rubber-banding&quot; effect where it speeds up and slows down in some way. Imagine we could use ease-out to simulate the gravity of a bouncing ball or something like that.</p>\n<p>The last one, cubic-bezier allows you to define your own curve via mathematics that I don&#39;t understand well enough to explain to you. But I wanted to show you if you have exact needs that one of the functions doesn&#39;t fit you can accomplish with cubic-bezier.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function\">Read more on the MDN here</a></p>\n<h2 id=\"beyond-positioning\">Beyond Positioning</h2>\n<p>I&#39;ve been showing you how to do this with positioning since it&#39;s the easiest to visualize. <em>Many</em> CSS properties are able to be animated so let&#39;s see one example here.</p>\n<pre><code class=\"hljs language-html\">&lt;style&gt;\n  @keyframes rainbow {\n    100%,\n    0% {\n      color: rgb(255, 0, 0);\n    }\n    8% {\n      color: rgb(255, 127, 0);\n    }\n    16% {\n      color: rgb(255, 255, 0);\n    }\n    25% {\n      color: rgb(127, 255, 0);\n    }\n    33% {\n      color: rgb(0, 255, 0);\n    }\n    41% {\n      color: rgb(0, 255, 127);\n    }\n    50% {\n      color: rgb(0, 255, 255);\n    }\n    58% {\n      color: rgb(0, 127, 255);\n    }\n    66% {\n      color: rgb(0, 0, 255);\n    }\n    75% {\n      color: rgb(127, 0, 255);\n    }\n    83% {\n      color: rgb(255, 0, 255);\n    }\n    91% {\n      color: rgb(255, 0, 127);\n    }\n  }\n  .rainbow-boi {\n    animation: rainbow 4s infinite linear;\n    font-size: 30px;\n  }\n&lt;/style&gt;\n&lt;div class=&quot;rainbow-boi&quot;&gt;Rainbow&lt;/div&gt;\n</code></pre>\n<ul>\n<li>Similar idea but with color. Lots of things can be animated, like size and position.</li>\n<li><code>from</code> is an alias for <code>0%</code> and <code>to</code> is an alias for <code>100%</code>. You can define percentages like we did here.</li>\n</ul>\n","slug":"animations","title":"Animations","section":"CSS","icon":"palette","filePath":"/home/runner/work/complete-intro-to-web-dev-v3/complete-intro-to-web-dev-v3/lessons/03-css/G-animations.md","nextSlug":"/complete-intro-to-web-dev-v3/lessons/css/putting-it-together","prevSlug":"/complete-intro-to-web-dev-v3/lessons/css/grid"}},"__N_SSG":true}
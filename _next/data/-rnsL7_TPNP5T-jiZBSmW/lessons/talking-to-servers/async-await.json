{"pageProps":{"post":{"attributes":{"description":"","title":"async/await"},"html":"<p>Promises make code hard to read. Before them we did everything with callbacks (similar to how we&#39;re doing event listeners, you just give a function to be run later) and it was even worse. We used to deal with what we called the &quot;pyramid of doom&quot; or just simply &quot;callback hell&quot; where we had to deal with functions inside of functions. As you saw with promise chaining, at least it&#39;s linear and not terrible to follow.</p>\n<p>What if it could be better? It can! With recent versions of JavaScript we got the ability to do what&#39;s called async/await. It allows us to make code even easier to read.</p>\n<pre><code class=\"hljs language-display-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dog-btn&quot;</span>&gt;</span>Gimme Doggo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dog-target&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n<p><button id=\"dog-btn3\">Gimme Doggo</button></p>\n<div id=\"dog-target3\"></div>\n\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DOG_URL</span> = <span class=\"hljs-string\">&quot;https://dog.ceo/api/breeds/image/random&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> doggos = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;dog-target3&quot;</span>);\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addNewDoggo</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-variable constant_\">DOG_URL</span>);\n  <span class=\"hljs-keyword\">const</span> processedResponse = <span class=\"hljs-keyword\">await</span> promise.<span class=\"hljs-title function_\">json</span>();\n  <span class=\"hljs-keyword\">const</span> img = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;img&quot;</span>);\n  img.<span class=\"hljs-property\">src</span> = processedResponse.<span class=\"hljs-property\">message</span>;\n  img.<span class=\"hljs-property\">alt</span> = <span class=\"hljs-string\">&quot;Cute doggo&quot;</span>;\n  doggos.<span class=\"hljs-title function_\">appendChild</span>(img);\n}\n\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;dog-btn3&quot;</span>).<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, addNewDoggo);\n</code></pre>\n<p>How much easier is that to read!? So much easier.</p>\n<p>Okay, so what&#39;s going on with this black magic?</p>\n<p>First, you can only use the magic <code>await</code> keyword inside of <code>async</code> functions. This can be confusing to folks but just be aware of that <code>await</code> can only be used in <code>async</code> functions.</p>\n<p>All <code>await</code> does is tell your code &quot;pause execution on this function until this promise resolves.&quot; So on the line <code>const promise = await fetch(DOG_URL);</code> the function stops executing until your API call finishes and you have a response back. It then picks back up where it was. It makes the code read very linearly which is great.</p>\n<p>One thing to note about async functions: they <em>always</em> return promises themselves.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getName</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Brian&quot;</span>;\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;a promise&quot;</span>, <span class=\"hljs-title function_\">getName</span>());\n\n<span class=\"hljs-title function_\">getName</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;the actual name&quot;</span>, name);\n});\n</code></pre>\n<p>Despite the fact we&#39;re not doing any awaiting in getName, because it&#39;s async it returns a promise. I show you this because it can catch people off guard. That&#39;s how <code>async</code> functions work and why <code>await</code> does work: they&#39;re async and therefore one may have to wait when you call them.</p>\n<p>Shouldn&#39;t be a thing to worry too much about though, only matters if you&#39; care about what your <code>async</code> function returns at the end.</p>\n","slug":"async-await","title":"async/await","section":"Talking to Servers","icon":"code-compare","filePath":"/home/runner/work/complete-intro-to-web-dev-v3/complete-intro-to-web-dev-v3/lessons/06-talking-to-servers/C-async-await.md","nextSlug":"/complete-intro-to-web-dev-v3/lessons/talking-to-servers/project","prevSlug":"/complete-intro-to-web-dev-v3/lessons/talking-to-servers/ajax"}},"__N_SSG":true}
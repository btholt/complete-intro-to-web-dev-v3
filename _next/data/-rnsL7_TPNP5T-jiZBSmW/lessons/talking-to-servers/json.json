{"pageProps":{"post":{"attributes":{"title":"JSON","description":""},"html":"<p>Some times you want to request additional data from the server after your page has loaded. Imagine like scrolling through your Facebook or Twitter feeds: when you reach the bottom it requests more data from the server to keep your infinite doomscroll going.</p>\n<p>Requesting data from the server after the page has loaded is called AJAX. AJAX is an old acronym that has been around for a while and actually now doesn&#39;t make any sense but we still use it. It stands for asynchronous JavaScript and XML (we don&#39;t typically use XML anymore.) However the name AJAX stuck so that&#39;s what it means.</p>\n<p>Before we hop into the AJAX portion, let&#39;s spend a bit with JSON. We need some standard language that your frontend website can speak with your backend, someway to encode messages. Think of it like morse code: we need some way that both the sender and receiver of messages can encode their messages so it&#39;s understood by both.</p>\n<p>This is what JSON is. It stands for JavaScript Object Notation and it looks a lot like, surprise-surpise, JavaScript objects.</p>\n<pre><code class=\"hljs language-JSON\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Luna&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;age&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">10</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;breed&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Havanese&quot;</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;location&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;city&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Seattle&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;state&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;WA&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<p>Looks like valid JavaScript, right? That&#39;s because it is! We could literally copy-and-paste that code straight into our JavaScript code and it&#39;d just work. That&#39;s because 99.999999% of all JSON is valid JavaScript (<a href=\"https://stackoverflow.com/questions/23752156/are-all-json-objects-also-valid-javascript-objects\">there are some corner cases</a> but I&#39;d bet most devs didn&#39;t even know that.)</p>\n<p>So let&#39;s try it out. Let&#39;s pretend we submitted a request to a server and got back a response. The response will always come back as a string so we have to convert it to an object. Luckily JavaScript can do that for us.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// pretend this came from a server instead of me just declaring it here.</span>\n<span class=\"hljs-keyword\">const</span> responseFromServer = <span class=\"hljs-string\">`{&quot;name&quot;: &quot;Luna&quot;,&quot;age&quot;: 10,&quot;breed&quot;: &quot;Havanese&quot;,&quot;location&quot;: {&quot;city&quot;:&quot;Seattle&quot;,&quot;state&quot;: &quot;WA&quot;}}`</span>;\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(responseFromServer); <span class=\"hljs-comment\">// a string</span>\n\n<span class=\"hljs-keyword\">const</span> responseObject = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(responseFromServer);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(responseObject.<span class=\"hljs-property\">name</span>); <span class=\"hljs-comment\">// just the name</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(responseObject.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">city</span>); <span class=\"hljs-comment\">// just the city</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(responseObject); <span class=\"hljs-comment\">// the whole object</span>\n</code></pre>\n<p>That&#39;s what the JSON builtin object is for, handling data to and from JSON.</p>\n<h2 id=\"escape-characters\">Escape Characters</h2>\n<p>You probably see a lot of <code>\\</code> being added. These are called escape characters. Notice it&#39;s showing the string between <code>&quot;</code> but the JSON uses <code>&quot;</code> inside of it. The way you prevent that <code>&quot;</code> from ending the string is using <code>\\&quot;</code> to signify that you&#39;re wanting to use the <code>&quot;</code> inside the string. So if you wanted to have a string of just one <code>&quot;</code> you&#39;d need to do <code>const quotes = &quot;\\&quot;&quot;</code>. Or you could just do <code>&#39;&quot;&#39;</code> too!.</p>\n<p>What if you want to have a <code>\\</code> in the string? You&#39;d use <code>\\\\</code> to signify one <code>\\</code>.</p>\n<h2 id=\"jsonstringify\">JSON.stringify</h2>\n<p>Let&#39;s use to go in the opposite direction:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> dog = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Luna&quot;</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">10</span>,\n  <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">&quot;Havanese&quot;</span>,\n  <span class=\"hljs-attr\">location</span>: {\n    <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&quot;Seattle&quot;</span>,\n    <span class=\"hljs-attr\">state</span>: <span class=\"hljs-string\">&quot;WA&quot;</span>,\n  },\n};\n\n<span class=\"hljs-keyword\">const</span> objString = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(dog);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(objString);\n</code></pre>\n<p>Yes, the function name is stringify. This takes an object and encodes it as valid JSON. Very useful.</p>\n<p>One more thing to do. Let&#39;s say you have a big object and you want to print it out in a useful way. Let me show you how to do that.</p>\n<p>We&#39;ll use this HTML.</p>\n<pre><code class=\"hljs language-display-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pre</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">code</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;code-block&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">code</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pre</span>&gt;</span>\n</code></pre>\n<pre>\n  <code id=\"code-block\"></code>\n</pre>\n\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> dog = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Luna&quot;</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">10</span>,\n  <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">&quot;Havanese&quot;</span>,\n  <span class=\"hljs-attr\">location</span>: {\n    <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&quot;Seattle&quot;</span>,\n    <span class=\"hljs-attr\">state</span>: <span class=\"hljs-string\">&quot;WA&quot;</span>,\n  },\n};\n\n<span class=\"hljs-keyword\">const</span> el = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;code-block&quot;</span>);\nel.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(dog, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">4</span>);\n</code></pre>\n<ul>\n<li><code>&lt;pre&gt;</code> means pre-formatted. It means respect whitespace and don&#39;t mess with the formatting</li>\n<li><code>&lt;code&gt;</code> means a block of code</li>\n<li>The two tags together mean you can have a nicely formatted code block. Useful for quick debugging when you can&#39;t use console.log.</li>\n<li><code>JSON.stringify(dog, null, 4)</code><ul>\n<li>The <code>null</code> you can ignore. You can give it a function that will <em>replace</em> things in your object. I don&#39;t even know how it works</li>\n<li>The <code>4</code> is how much indentation you want. If you give it <code>0</code> it puts not space in. If you put <code>8</code> you&#39;ll get a lot of whitespace.</li>\n</ul>\n</li>\n</ul>\n","slug":"json","title":"JSON","section":"Talking to Servers","icon":"code-compare","filePath":"/home/runner/work/complete-intro-to-web-dev-v3/complete-intro-to-web-dev-v3/lessons/06-talking-to-servers/A-json.md","nextSlug":"/complete-intro-to-web-dev-v3/lessons/talking-to-servers/ajax","prevSlug":"/complete-intro-to-web-dev-v3/lessons/putting-it-all-together/project"}},"__N_SSG":true}
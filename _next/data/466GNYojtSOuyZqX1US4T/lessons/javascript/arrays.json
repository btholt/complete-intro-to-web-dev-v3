{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>Objects are un-ordered collections of data using keys and values. Arrays, in contrast, are <strong>ordered collections of data</strong>. If you put something in an array, it has an order. For example, you might a list of the days of the week.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> daysOfTheWeek = [\n  <span class=\"hljs-string\">&quot;Monday&quot;</span>,\n  <span class=\"hljs-string\">&quot;Tuesday&quot;</span>,\n  <span class=\"hljs-string\">&quot;Wednesday&quot;</span>,\n  <span class=\"hljs-string\">&quot;Thursday&quot;</span>,\n  <span class=\"hljs-string\">&quot;Friday&quot;</span>,\n  <span class=\"hljs-string\">&quot;Saturday&quot;</span>,\n  <span class=\"hljs-string\">&quot;Sunday&quot;</span>,\n];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(daysOfTheWeek);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(daysOfTheWeek[<span class=\"hljs-number\">0</span>]);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(daysOfTheWeek[<span class=\"hljs-number\">1</span>]);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(daysOfTheWeek[<span class=\"hljs-number\">6</span>]);\n</code></pre>\n<p>You first can see how we declare an array, using <code>[ ]</code>. Inside of an array, you can store anything you can store in a variable. You can have an array of numbers, an array of strings, an array of objects, an array of arrays, an array of arrays of arrays, etc.</p>\n<p>You can also see above how we access individual elements in an array: we use square brackets again and then we reference the number that we want to access. Again, remember, the numbering starts at 0. So the first element is index 0.</p>\n<p>Arrays also have many methods (another word for functions that live on an object) and properties (another word for key/value pairs) that live on them. Let&#39;s see some of those:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> primeNumbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">17</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(primeNumbers.<span class=\"hljs-property\">length</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(primeNumbers.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&quot; | &quot;</span>));\n</code></pre>\n<p><code>primeNumbers.length</code> gives you back an number that is how long the array is. In this case there are eight elements in the array so it gives us back <code>8</code>. <code>primeNumbers.join(&quot; | &quot;))</code> takes your whole array and makes it into one string. The <code>&quot; | &quot;</code> paramenter I&#39;m passing is what I want put between each element, so you end up with the string <code>&quot;1 | 2 | 3 | 5 | 7 | 11 | 13 | 17&quot;</code>.</p>\n<p>So what if I want to add an element to the array after I&#39;ve created. Use <code>push</code>!</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> courses = [\n  { <span class=\"hljs-attr\">teacher</span>: <span class=\"hljs-string\">&quot;Will Sentance&quot;</span>, <span class=\"hljs-attr\">course</span>: <span class=\"hljs-string\">&quot;JavaScript: The Hard Parts&quot;</span> },\n  { <span class=\"hljs-attr\">teacher</span>: <span class=\"hljs-string\">&quot;Sarah Drasner&quot;</span>, <span class=\"hljs-attr\">course</span>: <span class=\"hljs-string\">&quot;Intro to Vue&quot;</span> },\n  { <span class=\"hljs-attr\">teacher</span>: <span class=\"hljs-string\">&quot;Brian Holt&quot;</span>, <span class=\"hljs-attr\">course</span>: <span class=\"hljs-string\">&quot;Complete Intro to React&quot;</span> },\n  { <span class=\"hljs-attr\">teacher</span>: <span class=\"hljs-string\">&quot;Steve Kinney&quot;</span>, <span class=\"hljs-attr\">course</span>: <span class=\"hljs-string\">&quot;Build Your Own Programming Language&quot;</span> },\n  { <span class=\"hljs-attr\">teacher</span>: <span class=\"hljs-string\">&quot;Scott Moss&quot;</span>, <span class=\"hljs-attr\">course</span>: <span class=\"hljs-string\">&quot;Intro to Node.js&quot;</span> },\n];\n\ncourses.<span class=\"hljs-title function_\">push</span>({ <span class=\"hljs-attr\">teacher</span>: <span class=\"hljs-string\">&quot;Jen Kramer&quot;</span>, <span class=\"hljs-attr\">course</span>: <span class=\"hljs-string\">&quot;Getting Started with CSS&quot;</span> });\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(courses);\n\ncourses[<span class=\"hljs-number\">2</span>] = { <span class=\"hljs-attr\">teacher</span>: <span class=\"hljs-string\">&quot;Brian Holt&quot;</span>, <span class=\"hljs-attr\">course</span>: <span class=\"hljs-string\">&quot;Complete Intro to Databases&quot;</span> };\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(courses);\n</code></pre>\n<p>The first thing we do is add an element to the end using the push function that arrays have. It &quot;pushes&quot; the element on the end.</p>\n<p>Below that, we&#39;re overriding index 2 with a new course. This will throw away what was there before and set it to be what we&#39;ve set it to be.</p>\n<p>Okay, now, given that, what if we wanted to <code>console.log</code> everything in the array? You already have all the tools to do that? Let&#39;s see to do it.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> cities = [\n  <span class=\"hljs-string\">&quot;Seattle&quot;</span>,\n  <span class=\"hljs-string\">&quot;San Francisco&quot;</span>,\n  <span class=\"hljs-string\">&quot;Salt Lake City&quot;</span>,\n  <span class=\"hljs-string\">&quot;Amsterdam&quot;</span>,\n  <span class=\"hljs-string\">&quot;Hong Kong&quot;</span>,\n];\n\n<span class=\"hljs-comment\">// method 1</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; cities.<span class=\"hljs-property\">length</span>; i++) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(cities[i]);\n}\n\n<span class=\"hljs-comment\">// method 2</span>\ncities.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">city</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(city);\n});\n</code></pre>\n<p>The first way, using a for loop, we&#39;re using that <code>i</code> control variable which gets incremented each loop. We use that <code>i</code> to access each item in the array on each iteration of the loop. We have the loop stop when <code>i</code> gets equal to the <code>length</code> of cities. Very useful pattern. You&#39;ll see it a lot.</p>\n<p>The second way is using a function that arrays have called <code>forEach</code>. This <code>forEach</code> method takes in a function and that function will be called once on each item of the array. It will pass that item into the function, which is what <code>city</code> is in this situation. Both are useful patterns to know. You&#39;ll use both frequently. While you&#39;re getting started, just use the one you feel comfortable with. They have different things that make them preferable in different situations but usually you can use either. Method 2 may be a bit more advance but I don&#39;t think you should be scared of it. For now prefer method 1. I just wanted you to see method 2.</p>\n","slug":"arrays","title":"Arrays","section":"JavaScript","icon":"bolt","filePath":"/home/runner/work/complete-intro-to-web-dev-v3/complete-intro-to-web-dev-v3/lessons/04-javascript/K-arrays.md","nextSlug":"/complete-intro-to-web-dev-v3/lessons/putting-it-all-together/the-dom","prevSlug":"/complete-intro-to-web-dev-v3/lessons/javascript/context"}},"__N_SSG":true}
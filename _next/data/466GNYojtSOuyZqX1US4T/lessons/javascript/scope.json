{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>We&#39;ll talk about scope multiple times but we&#39;ll start off here with it. Every time you call a function, it has its own scope. Other things can&#39;t peek into it; it just has its own little workspace for it work with. Once its done, any variable that you haven&#39;t explicitly held on to or returned at the end is discarded. For example:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addFive</span>(<span class=\"hljs-params\">number</span>) {\n  <span class=\"hljs-keyword\">const</span> someVariable = <span class=\"hljs-string\">&quot;you can&#x27;t see me outside this function&quot;</span>;\n  <span class=\"hljs-keyword\">return</span> number + <span class=\"hljs-number\">5</span>;\n}\n\n<span class=\"hljs-title function_\">addFive</span>(<span class=\"hljs-number\">10</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(someVariable);\n</code></pre>\n<p>This is not going to work. <code>someVariable</code> is inside of the <code>addFive</code> scope and once <code>addFive</code> completes, it throws <code>someVariable</code> away since it&#39;s now out-of-scope.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> friendsAtYourParty = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt;= <span class=\"hljs-number\">10</span>; i++) {\n  friendsAtYourParty++;\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(i);\n</code></pre>\n<p>Even this doesn&#39;t work since <code>i</code> is only in scope for the loop and then after that it&#39;s thrown away. This can be a difficult one to deal with as someone new to coding because you&#39;ll go to log something or use a variable and it&#39;s out of scope so it&#39;s not there. Just know if that happens, this is probably the problem.</p>\n<p>Scope is hard. And scope is particularly strange in JavaScript (it varies by programming language.) If it feels hard it&#39;s because it is. A general, imperfect way for you to think about it right now is that a variable is &quot;alive&quot; (in scope) in between whatever the closest <code>{</code> is until that <code>{</code> closes its corresponding <code>}</code>. A few examples below, see if you can get it right. Keep in mind that the variable will stay in scope as long as any scope it exists in still exists. If I declare a variable in an outter scope and modify a variable in an inner scope, that variable will survive as long as the outter scope does. <strong>It matters where the variable is declared.</strong></p>\n<pre><code class=\"hljs language-display-javascript\"><span class=\"hljs-keyword\">const</span> A = <span class=\"hljs-string\">&quot;A&quot;</span>;\n<span class=\"hljs-keyword\">let</span> F;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doStuff</span>(<span class=\"hljs-params\">B</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(B);\n  <span class=\"hljs-keyword\">const</span> C = <span class=\"hljs-string\">&quot;C&quot;</span>;\n  <span class=\"hljs-keyword\">let</span> H = <span class=\"hljs-string\">&quot;H&quot;</span>;\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span> === <span class=\"hljs-number\">2</span>) {\n    <span class=\"hljs-keyword\">const</span> D = <span class=\"hljs-string\">&quot;D&quot;</span>;\n    H = <span class=\"hljs-string\">&quot;something else&quot;</span>;\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(D);\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(H);\n  F = <span class=\"hljs-string\">&quot;F&quot;</span>;\n}\n\n<span class=\"hljs-keyword\">let</span> E = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">while</span> (E &lt; <span class=\"hljs-number\">3</span>) {\n  E++;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(A);\n  <span class=\"hljs-keyword\">const</span> G = <span class=\"hljs-string\">&quot;G&quot;</span>;\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(E);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(G);\n\n<span class=\"hljs-title function_\">doStuff</span>(<span class=\"hljs-string\">&quot;B&quot;</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(B);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(C);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(F);\n</code></pre>\n<p>This is pretty convulated example but see what you think. Once your ready, the next block will be the answers.</p>\n<pre><code class=\"hljs language-display-javascript\"><span class=\"hljs-keyword\">const</span> A = <span class=\"hljs-string\">&quot;A&quot;</span>;\n<span class=\"hljs-keyword\">let</span> F;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doStuff</span>(<span class=\"hljs-params\">B</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(B); <span class=\"hljs-comment\">// works, B parameter is still in scope</span>\n  <span class=\"hljs-keyword\">const</span> C = <span class=\"hljs-string\">&quot;C&quot;</span>;\n  <span class=\"hljs-keyword\">let</span> H = <span class=\"hljs-string\">&quot;H&quot;</span>;\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span> === <span class=\"hljs-number\">2</span>) {\n    <span class=\"hljs-keyword\">const</span> D = <span class=\"hljs-string\">&quot;D&quot;</span>;\n    H = <span class=\"hljs-string\">&quot;something else&quot;</span>;\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(D); <span class=\"hljs-comment\">// does not work, D was declared in that if statement block</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(H); <span class=\"hljs-comment\">// works, H was declared outside the if statement</span>\n  F = <span class=\"hljs-string\">&quot;F&quot;</span>;\n}\n\n<span class=\"hljs-keyword\">let</span> E = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">while</span> (E &lt; <span class=\"hljs-number\">3</span>) {\n  E++;\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(A); <span class=\"hljs-comment\">// works, the outter block (called the global scope) is still in scope</span>\n  <span class=\"hljs-keyword\">const</span> G = <span class=\"hljs-string\">&quot;G&quot;</span>;\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(E); <span class=\"hljs-comment\">// works, E was declared outside the whie loop</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(G); <span class=\"hljs-comment\">// does not work, declared inside the while loop and it&#x27;s over</span>\n\n<span class=\"hljs-title function_\">doStuff</span>(<span class=\"hljs-string\">&quot;B&quot;</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(B); <span class=\"hljs-comment\">// does not work, the B parameter expires after the function call</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(C); <span class=\"hljs-comment\">// does not work, C was declared inside the function and the function is over</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(F); <span class=\"hljs-comment\">// works, F was declared in the global scope</span>\n</code></pre>\n","slug":"scope","title":"Scope","section":"JavaScript","icon":"bolt","filePath":"/home/runner/work/complete-intro-to-web-dev-v3/complete-intro-to-web-dev-v3/lessons/04-javascript/G-scope.md","nextSlug":"/complete-intro-to-web-dev-v3/lessons/javascript/builtins","prevSlug":"/complete-intro-to-web-dev-v3/lessons/javascript/functions"}},"__N_SSG":true}
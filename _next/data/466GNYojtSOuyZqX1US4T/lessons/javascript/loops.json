{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>Okay so now what if I want do one thing multiple times? I could do something like this</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> friendsAtYourParty = <span class=\"hljs-number\">0</span>;\nfriendsAtYourParty = friendsAtYourParty + <span class=\"hljs-number\">1</span>;\nfriendsAtYourParty = friendsAtYourParty + <span class=\"hljs-number\">1</span>;\nfriendsAtYourParty = friendsAtYourParty + <span class=\"hljs-number\">1</span>;\nfriendsAtYourParty = friendsAtYourParty + <span class=\"hljs-number\">1</span>;\nfriendsAtYourParty = friendsAtYourParty + <span class=\"hljs-number\">1</span>;\nfriendsAtYourParty = friendsAtYourParty + <span class=\"hljs-number\">1</span>;\nfriendsAtYourParty = friendsAtYourParty + <span class=\"hljs-number\">1</span>;\nfriendsAtYourParty = friendsAtYourParty + <span class=\"hljs-number\">1</span>;\nfriendsAtYourParty = friendsAtYourParty + <span class=\"hljs-number\">1</span>;\nfriendsAtYourParty = friendsAtYourParty + <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(friendsAtYourParty);\n</code></pre>\n<p>That&#39;s annoying though. I wish there was a better way. Before we explore that, let&#39;s chat about this example a tad more.</p>\n<p>We used <code>let</code> instead of <code>const</code>. Things that are <code>const</code> cannot be reassigned later. In general I find this be of minor help but others do not so I leave you to make your own judgement call. In general one should try to follow the &quot;principle of least power.&quot; You should always choose the least powerful &quot;thing&quot; to accomplish whatever you&#39;re trying to do. Things with less power tend to be simpler and simple things are less prone to having or causing bugs. Why don&#39;t you cut your hair with garden shears? You could, it&#39;d work, but it&#39;s way easier to screw it up and has worse consequences. Same general idea here. Right tool for the right job.</p>\n<p>We instead use <code>let</code> here because you can see on the subsequent lines we do reassign <code>friendsAtYourParty</code> to be a different number. If you used <code>const</code> your code would crash because <code>const</code> won&#39;t let you do that. Thus here we use <code>let</code>. There&#39;s another one called <code>var</code> that is the old way of doing JavaScript. There are differences but I don&#39;t see a reason to use <code>var</code> at all anymore. It behaves more similar to <code>let</code>.</p>\n<p>Okay, so, we want to do this better, let&#39;s explore a few ways to do that using loops.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> friendsAtYourParty = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">while</span> (friendsAtYourParty &lt; <span class=\"hljs-number\">10</span>) {\n  friendsAtYourParty = friendsAtYourParty + <span class=\"hljs-number\">1</span>;\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(friendsAtYourParty);\n</code></pre>\n<p>This is a while loop. The first part works similar to an <code>if</code> statement: as long as what&#39;s inside that statement is <strong>true</strong> it will continue running and re-running the body (what&#39;s between the <code>{ }</code>) until that statement is false. Once that statement is false, it&#39;ll break the loop and continue on. This case, we add 1 to <code>friendsAtYourParty</code> until it&#39;s 10, and then the next loop, when it&#39;s 10, it&#39;ll stop because 10 is not less than 10.</p>\n<p>Also, let&#39;s just show you a few shortcuts for adding one to a thing</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> friendsAtYourParty = <span class=\"hljs-number\">0</span>;\nfriendsAtYourParty = friendsAtYourParty + <span class=\"hljs-number\">1</span>;\nfriendsAtYourParty += <span class=\"hljs-number\">1</span>;\nfriendsAtYourParty++;\n++friendsAtYourParty;\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(friendsAtYourParty);\n</code></pre>\n<p>Those four lines are equivalent. They all do the exact same thing: they add one to the existing total. The second one, the plus-equals line, you can put any number there and it&#39;ll add that amount to total, so <code>friendsAtYourParty += 15;</code> would add 15 to the total. It also works with <code>-=</code> (subtraction,) as well as <code>*=</code> (multiplication,) <code>/=</code> (division,) and <code>**=</code> (exponent.) Two last two lines (<code>++</code> before or after) just signify add one. They more-or-less mean the same thing (there&#39;s a subtle different of <em>when</em> it adds one that should never matter to you) but suffice to say everyone in the JavaScript community <em>always</em> does the <code>++</code> after; I&#39;ve never seen anyone do it before in JavaScript. <code>--</code> Works as well to subtract one as well.</p>\n<p>Okay, so now let&#39;s see a second kind of loop to achieve the same effect as above.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> friendsAtYourParty = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt;= <span class=\"hljs-number\">10</span>; i++) {\n  friendsAtYourParty++;\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(friendsAtYourParty);\n</code></pre>\n<p>This is a for loop which is likely the most common kind of loop. Inside the parens are three statements and you need all of them. The <code>let i = 0;</code> is you defining your control variable that will control the loop. For some reason people always use <code>i</code>, not sure why. It&#39;s just that way. It really could be anything. The second statement <code>i &lt;= 10</code> is just like the while loop, is that&#39;s the statement that is as soon as it&#39;s false it breaks the loop. The last statement, <code>i++</code> is that happens at the end of every loop. In our case, we increment the control variable <code>i</code> so that it creeps closer to the end of the loop each time.</p>\n<p>An important note: in coding, we start counting from 0. In English, we count <code>1, 2, 3, 4, 5, etc.</code> but in coding we count <code>0, 1, 2, 3, 4, etc.</code>. So the fifth element of a string is index 4 (where index is how we&#39;d refer to where that item is in the string). Index 0 is the first element. It&#39;s weird but you get used to it and it makes a lot of things easier.</p>\n<p>Sometimes, if you mess up what&#39;s inside the control condition for the loop, you&#39;ll get a runaway loop that&#39;ll never complete. This is called an <strong>infinite loop</strong> and it&#39;ll lock up and crash your code. Something like this:</p>\n<pre><code class=\"hljs language-display-javascript\"><span class=\"hljs-keyword\">let</span> friendsAtYourParty = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">while</span> (friendsAtYourParty &gt; <span class=\"hljs-number\">0</span>) {\n  friendsAtYourParty = friendsAtYourParty + <span class=\"hljs-number\">1</span>;\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(friendsAtYourParty);\n</code></pre>\n<p>Since you&#39;re adding one to <code>friendsAtYourParty</code> each time, and the loop will continue each time until it&#39;s less than zero, that condition will never happen. Thus it&#39;ll continue going until it crashes your code. Be careful of these. Nasty bugs.</p>\n","slug":"loops","title":"Loops","section":"JavaScript","icon":"bolt","filePath":"/home/runner/work/complete-intro-to-web-dev-v3/complete-intro-to-web-dev-v3/lessons/04-javascript/D-loops.md","nextSlug":"/complete-intro-to-web-dev-v3/lessons/javascript/exercise","prevSlug":"/complete-intro-to-web-dev-v3/lessons/javascript/control-flow"}},"__N_SSG":true}